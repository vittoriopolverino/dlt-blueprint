default_stages: [commit]
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: check-added-large-files # Prevent giant files from being committed
        args: ['--maxkb=5000']
      - id: check-ast # Simply check whether files parse as valid python
      - id: check-case-conflict # Check for files with names that would conflict on a case-insensitive filesystem like MacOS HFS+ or Windows FAT.
      - id: check-docstring-first # Checks for a common error of placing code before the docstring
      - id: check-json # Attempts to load all json files to verify syntax
      - id: check-merge-conflict # Check for files that contain merge conflict strings
      - id: check-toml # Attempts to load all TOML files to verify syntax
      - id: check-yaml # Attempts to load all yaml files to verify syntax
      - id: debug-statements # Check for debugger imports and py37+ breakpoint() calls in python source
      - id: detect-private-key # Checks for the existence of private keys
      - id: double-quote-string-fixer # This hook replaces double quoted strings with single quoted strings
      - id: end-of-file-fixer # Makes sure files end in a newline and only a newline
        exclude: README.md
      - id: name-tests-test # verifies that tests files are named correctly. --pytest (the default): ensure tests match .*_test\.py
      - id: pretty-format-json # Checks that all your JSON files are pretty. "Pretty" here means that keys are sorted and indented. You can configure this with the following commandline options
        args: ['--autofix']
      - id: requirements-txt-fixer # Sorts entries in requirements.txt and removes incorrect entry for pkg-resources==0.0.0
      - id: trailing-whitespace # Trims trailing whitespace.
        exclude: README.md


  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      # isort is a Python utility / library to sort imports alphabetically, and automatically separated into sections and by type
      - id: isort
        args: ['--profile', 'black', '--filter-files']

  - repo: https://github.com/psf/black
    rev: 23.1.0
    hooks:
      # Black is the uncompromising Python code formatter. By using it, you agree to cede control over minutiae of hand-formatting
      - id: black
        args: ['--line-length=120', '--skip-string-normalization']

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      # Flake8 is a popular lint wrapper for python. Under the hood, it runs three other tools and combines their results: pep8 for checking style. pyflakes for checking syntax. mccabe for checking complexity.
      - id: flake8
        args: ['--max-line-length=120', '--max-function-length=200']
        additional_dependencies: ['flake8-print', 'flake8-builtins', 'flake8-functions']
        language_version: python3.9

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: 'v1.0.1'
    hooks:
      # Mypy is an optional static type checker for Python that aims to combine the benefits of dynamic (or "duck") typing and static typing
      - id: mypy

  - repo: https://github.com/python-poetry/poetry
    rev: '1.3.0'
    hooks:
      # The poetry-check hook calls the poetry check command to make sure the poetry configuration does not get committed in a broken state
      - id: poetry-check
      # The poetry-lock hook calls the poetry lock command to make sure the lock file is up-to-date when committing changes.
      - id: poetry-lock
        stages: [push]

  - repo: local
    hooks:
      - id: tests
        name: Unit and Integration tests
        entry: docker-compose up
        language: python
        "types": [python]
        pass_filenames: false
        stages: [push]
